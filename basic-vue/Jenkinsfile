library identifier: "pipeline-library@master", retriever: modernSCM(
  [$class: "GitSCMSource",
   remote: "https://github.com/redhat-cop/pipeline-library.git"])

openshift.withCluster() {

    CI_CD_PROJECT = "${OPENSHIFT_BUILD_NAMESPACE}"
    APP_NAME = "${JOB_NAME}".replaceAll(/-?${env.PROJECT_NAME}-?/, '').replaceAll(/-?pipeline-?/, '').replaceAll('/','')

    //location of distribution files
    DIST_CONTEXT_DIR = "dist/"
    DEV_PROJECT = CI_CD_PROJECT.replace('ci-cd', 'dev')
    TEST_PROJECT = CI_CD_PROJECT.replace('ci-cd', 'test')

    echo "Starting Pipeline for ${APP_NAME}..."

}

pipeline {

    agent {
        label "jenkins-slave-npm"
    }

    stages {

        // Checkout source code
        // This is required as Pipeline code is originally checked out
        // so this will pull the application source code to this slave
        stage('Git Checkout Application') {
            steps {
                // Turn off Git's SSL cert check, uncomment if needed
                // sh 'git config --global http.sslVerify false'
                git url: "${APPLICATION_SOURCE_REPO}"
            }
        }

        stage('Build') {
            steps {
                sh "npm install"
                sh "npm run build"
                sh "cp -R httpd-cfg ${DIST_CONTEXT_DIR}"
            }
        }

        stage('Unit Test') {
            steps {
                sh "npm run test:unit"
            }
        }
        stage('Build Image') {
            steps {
                binaryBuild(projectName: "${CI_CD_PROJECT}", buildConfigName: "${APP_NAME}", artifactsDirectoryName: "${DIST_CONTEXT_DIR}")
            }
        }
        stage('Deploy to Dev') {
            steps {
                tagImage(sourceImageName: "${APP_NAME}", sourceImagePath: "${CI_CD_PROJECT}", toImagePath: "${DEV_PROJECT}", toImageTag: "deployed")
                verifyDeployment(targetApp: "${APP_NAME}", projectName: "${DEV_PROJECT}")
            }
        }
        stage('E2E Testing') {
            steps {
                //get route from dev namespace
                script {
                    openshift.withCluster() {
                        openshift.withProject("${DEV_PROJECT}") {
                            def route = openshift.selector("route/${APP_NAME}").object()
                            echo "${route.spec.host}"
                            sh "npm run test:e2e -- --url 'https://${route.spec.host}' --config tests/e2e/nightwatch.conf.js"
                        }
                    }
                }
            }
        }
        stage('Promotion gate') {
            steps {
                script {
                input message: 'Promote application to Test?'
                }
            }  
        }
        stage('Deploy to Test') {
            steps {
                tagImage(sourceImageName: "${APP_NAME}", sourceImagePath: "${DEV_PROJECT}", sourceImageTag: "deployed", toImagePath: "${TEST_PROJECT}", toImageTag: "deployed")
                verifyDeployment(targetApp: "${APP_NAME}", projectName: "${TEST_PROJECT}")
            }
        }

    }
}